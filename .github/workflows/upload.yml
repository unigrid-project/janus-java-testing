name: Upload to release tag

on:
  workflow_dispatch:
    inputs:
      distinct_id:
        type: string
        description: 'distinct_id used by return-dispatch'
      target_module:
        description: 'Target module'
        type: choice
        options:
        - bootstrap
        - fx
      bump:
        description: 'Bump version'
        type: choice
        options:
        - Revision
        - Minor
        - Major
      skip_ubuntu:
        type: boolean
        description: Skip ubuntu, will skip upload artifacts files too
        default: true
      skip_windows:
        type: boolean
        description: Skip windows
        default: true
      skip_macos:
        type: boolean
        description: Skip macos
        default: true

env:
  GH_TOKEN: ${{ secrets.ACTION_PAT }}
  config_matchers: config/target/config*test.xml
  fx_matchers: fx/target/fx*.jar
  tag_delimeter: '-'

jobs:
  upload:
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            skip: ${{ inputs.skip_ubuntu }}
          - os: windows-latest
            skip: ${{ inputs.skip_windows }}
          - os: macos-latest
            skip: ${{ inputs.skip_macos }}
    name: Upload to release
    runs-on: ${{ matrix.os }}
    permissions: write-all
    steps:
      - name: echo distinct ID ${{ inputs.distinct_id }}
        if: inputs.distinct_id != ''
        run: echo ${{ inputs.distinct_id }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Output Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"

      - name: Set up JDK 17
        if: matrix.skip != true
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Maven
        if: matrix.skip != true
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6

      - name: Get tag name
        shell: bash
        run: echo "tag_name=$(git describe --tags --abbrev=0 --match "*-*" HEAD)" >> $GITHUB_ENV

      - name: Print tag_name
        run: echo "${{ env.tag_name }}"

      - name: Build images, configs and upload them
        if: matrix.skip != true && inputs.target_module == 'bootstrap'
        shell: bash
        run: |
          export version="${{ env.tag_name }}"
          export version=$(echo "${version#*v}" | awk -F. '{print $1"."$2"."$3+0}')
          if [[ "${{ runner.os }}" == 'Linux' ]]; then
            export filename_matcher="unigrid_${version}*amd64.deb"
            export filename="unigrid_${version}_amd64.deb"
            additional_cmd="sudo apt-get -y install alien"
            additional_cmd="$additional_cmd && alien -r $filename"
            additional_cmd="$additional_cmd && mv unigrid-${version}*x86_64.rpm unigrid-${version}-x86_64.rpm"
            additional_cmd="$additional_cmd && gh release upload v${version}${{ env.tag_delimeter }}${{ inputs.target_module }} unigrid-${version}-x86_64.rpm --clobber"
            additional_cmd="$additional_cmd && mkdir -p artifacts"
            additional_cmd="$additional_cmd && rsync -av ${{ env.config_matchers }} artifacts"
          elif [[ "${{ runner.os }}" == 'Windows' ]]; then
            export filename_matcher="Unigrid-${version}*.msi"
            export filename="Unigrid-${version}.msi"
          elif [[ "${{ runner.os }}" == 'macOS' ]]; then
            export filename_matcher="Unigrid-${version}*.dmg"
            export filename="Unigrid-${version}.dmg"
          fi

          mvn -f config/pom.xml install -Dmaven.test.skip=true -Dcheckstyle.skip
          mvn install -Dmaven.test.skip=true -Dcheckstyle.skip
          mvn -f desktop/pom.xml jpackage:jpackage@installer -Djpackage.version=${version} -Dmaven.test.skip=true  -Dcheckstyle.skip
          ls desktop/target/dist/
          cp desktop/target/dist/$filename_matcher .
          ls .
          mv $filename_matcher $filename

          if [[ "${{ runner.os }}" == 'macOS' ]]; then
            echo ${{ secrets.MACOS_CERTIFICATE }} | base64 -d > certificate.p12
            security create-keychain -p ${{ secrets.KEYCHAIN_PWD }} build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p ${{ secrets.KEYCHAIN_PWD }} build.keychain
            security import certificate.p12 -k build.keychain -P ${{ secrets.MACOS_CERTIFICATE_PWD }} -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k ${{ secrets.KEYCHAIN_PWD }} build.keychain
            /usr/bin/codesign --force -s "Developer ID Application: UGD Software AB (XH4NHZYJ98)" ./$filename -v
            codesign -dv --verbose=4 $filename && echo SIGNED!
            codesign -vv -d $filename
          fi

          gh release upload ${{ env.tag_name }} $filename --clobber

          eval $additional_cmd

      - name: Build config and upload them
        if: matrix.skip != true && runner.os == 'Linux' && inputs.target_module == 'fx'
        shell: bash
        run: |
          export version="${{ env.tag_name }}"
          export version=$(echo "${version#*v}" | awk -F. '{print $1"."$2"."$3+0}')
          mvn -f config/pom.xml install -Dmaven.test.skip=true -Dcheckstyle.skip
          mvn install -Dmaven.test.skip=true -Dcheckstyle.skip
          gh release upload ${{ env.tag_name }} fx/target/fx-$version.jar --clobber
          mkdir -p artifacts
          rsync -av ${{ env.config_matchers }} artifacts

      - name: Archive artifacts
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: artifacts

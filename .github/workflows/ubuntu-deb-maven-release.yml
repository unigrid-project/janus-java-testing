name: Maven release tag

on:
  workflow_dispatch:
    inputs:
      distinct_id:
        type: string
        description: 'distinct_id used by return-dispatch'
      target_module:
        description: 'Target module'
        type: choice
        options:
        - bootstrap
        - fx
      bump:
        description: 'Bump version'
        type: choice
        options:
        - Revision
        - Minor
        - Major
      skip_test:
        type: boolean
        description: Skip test
        default: false

env:
  skip_fx: ${{ inputs.skip_fx }}
  skip_bootstrap: ${{ inputs.skip_bootstrap }}
  skip_desktop: ${{ inputs.skip_desktop }}
  snapshot: "-SNAPSHOT"
  username: 'Github Actions'
  email: 'actions@github.com'

jobs:
  release-tag:
    name: Release tag
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: echo distinct ID ${{ inputs.distinct_id }}
        if: inputs.distinct_id != ''
        run: echo ${{ inputs.distinct_id }}

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: 3.8.6

      - name: Push pom files to master
        run: |
          git config --global user.name ${{ env.username }}
          git config --global user.email ${{ env.email }}

      - name: Set arguments for skip test
        if: inputs.skip_test == true
        run: echo "arguments=$(echo -Dcheckstyle.skip -Dmaven.test.skip=true)" >> $GITHUB_ENV

      - name: Requires config build
        run: xvfb-run -a mvn -f config/pom.xml install ${{ env.arguments }}

      - name: Requires release build
        run: xvfb-run -a mvn -f release/pom.xml install ${{ env.arguments }}

      - name: Bump Minor or Major
        if: inputs.bump != 'Revision'
        run: |
          if [ "${{ inputs.bump }}" = "Major" ]; then
            xvfb-run -a mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0${{ env.snapshot }} -DgenerateBackupPoms=false
          elif [ "${{ inputs.bump }}" = "Minor" ]; then
            xvfb-run -a mvn -B build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0${{ env.snapshot }} -DgenerateBackupPoms=false
          fi

          xvfb-run -a mvn -B release:prepare -Darguments=${{ env.arguments }} -DautoVersionSubmodules=true -DgenerateReleasePoms=false
          git push --tags

          export latest_tag=$(git tag --sort=-version:refname | head -n1)
          export second_latest_commit=$(git show --no-patch --format="%H" HEAD~1)
          git tag ${latest_tag}-fx $second_latest_commit
          git tag ${latest_tag}-bootstrap $second_latest_commit
          git push --tags

      - name: Bump Revision
        if: inputs.bump == 'Revision'
        run: |
          xvfb-run -a mvn -X -B release:prepare -Darguments=${{ env.arguments }} -Dmodule=${{ inputs.target_module }} -DautoVersionSubmodules=false -DgenerateReleasePoms=false
          git push --tags
